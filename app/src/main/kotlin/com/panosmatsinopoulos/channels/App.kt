/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.panosmatsinopoulos.channels

import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.cancelChildren
import kotlinx.coroutines.channels.ReceiveChannel
import kotlinx.coroutines.channels.produce
import kotlinx.coroutines.runBlocking

@OptIn(ExperimentalCoroutinesApi::class)
fun CoroutineScope.numbers(start: Int) = produce<Int> {
    var i = start
    while (true) send(i++)
}

@OptIn(ExperimentalCoroutinesApi::class)
fun CoroutineScope.filter(numbers: ReceiveChannel<Int>, prime: Int) = produce<Int> {
    for (x in numbers) {
        if (x % prime != 0) {
            send(x)
        }
    }
}

fun log(msg: String) {
    println("[${Thread.currentThread().name}] $msg")
}

fun main() {
    runBlocking {
        var n = numbers(2)
        repeat(10) {
            val i = n.receive()
            log("received: $i")
            n = filter(n, i)

        }
        coroutineContext.cancelChildren()
    }
}
