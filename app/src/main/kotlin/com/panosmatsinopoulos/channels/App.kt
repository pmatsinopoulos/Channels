/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.panosmatsinopoulos.channels

import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.cancelChildren
import kotlinx.coroutines.channels.ReceiveChannel
import kotlinx.coroutines.channels.produce
import kotlinx.coroutines.runBlocking

private fun log(msg: String) {
    println("[${Thread.currentThread().name}] $msg")
}

@OptIn(ExperimentalCoroutinesApi::class)
fun CoroutineScope.productNumbers(): ReceiveChannel<Int> = produce {
    var i = 1
    while (true) {
        send(i++)
    }
}

@OptIn(ExperimentalCoroutinesApi::class)
fun CoroutineScope.squares(incoming: ReceiveChannel<Int>): ReceiveChannel<Int> = produce {
    for (i in incoming) {
        send(i * i)
    }
    close()
}

fun main() {
    log("main starting")

    runBlocking {
        val numbers = productNumbers()
        val squares = squares(numbers)
        repeat(5) {
            log("receiving ${squares.receive()}")
        }
        log("Done!")
        coroutineContext.cancelChildren()
    }

    log("main ending")
}
